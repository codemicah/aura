// SPDX-License-Identifier: MIT
pragma solidity ^0.8.23;

/**
 * @title IYieldYak
 * @dev Interface for YieldYak yield farming protocol interactions
 * @notice This interface covers the main YieldYak functions needed for yield optimization
 */
interface IYieldYak {
    /**
     * @dev Deposit AVAX into a yield farming strategy
     * @notice Payable function that accepts AVAX deposits
     */
    function deposit() external payable;

    /**
     * @dev Deposit a specific amount of tokens into the strategy
     * @param amount Amount of tokens to deposit
     */
    function depositToken(uint256 amount) external;

    /**
     * @dev Withdraw tokens from the strategy
     * @param amount Amount of shares to withdraw
     */
    function withdraw(uint256 amount) external;

    /**
     * @dev Withdraw all tokens from the strategy
     */
    function withdrawAll() external;

    /**
     * @dev Get the total supply of strategy shares
     * @return supply Total share supply
     */
    function totalSupply() external view returns (uint256 supply);

    /**
     * @dev Get the balance of shares for an account
     * @param account Account address
     * @return balance Share balance
     */
    function balanceOf(address account) external view returns (uint256 balance);

    /**
     * @dev Get the total yield generated by the strategy
     * @return yield Total yield in basis points (e.g., 1200 = 12%)
     */
    function totalYield() external view returns (uint256 yield);

    /**
     * @dev Get the current APY of the strategy
     * @return apy Current APY in basis points
     */
    function getCurrentAPY() external view returns (uint256 apy);

    /**
     * @dev Get the price per full share
     * @return price Price per share in underlying token units
     */
    function getPricePerFullShare() external view returns (uint256 price);

    /**
     * @dev Get the strategy's total deposited amount
     * @return balance Total deposited balance in underlying tokens
     */
    function balance() external view returns (uint256 balance);

    /**
     * @dev Get available funds in the strategy (not invested)
     * @return available Available balance
     */
    function available() external view returns (uint256 available);

    /**
     * @dev Harvest rewards and compound them
     */
    function harvest() external;

    /**
     * @dev Get the underlying token address
     * @return token Underlying token address
     */
    function token() external view returns (address token);

    /**
     * @dev Get the strategy name
     * @return name Strategy name
     */
    function name() external view returns (string memory name);

    /**
     * @dev Get the strategy symbol
     * @return symbol Strategy symbol
     */
    function symbol() external view returns (string memory symbol);

    /**
     * @dev Get strategy decimals
     * @return decimals Number of decimals
     */
    function decimals() external view returns (uint8 decimals);

    /**
     * @dev Transfer strategy shares
     * @param to Recipient address
     * @param amount Amount to transfer
     * @return success Whether transfer was successful
     */
    function transfer(address to, uint256 amount) external returns (bool success);

    /**
     * @dev Approve share spending
     * @param spender Address to approve
     * @param amount Amount to approve
     * @return success Whether approval was successful
     */
    function approve(address spender, uint256 amount) external returns (bool success);

    /**
     * @dev Get allowance for strategy shares
     * @param owner Share owner address
     * @param spender Spender address
     * @return allowance Current allowance amount
     */
    function allowance(address owner, address spender) external view returns (uint256 allowance);
}

/**
 * @title IYieldYakRouter
 * @dev Interface for YieldYak Router contract
 */
interface IYieldYakRouter {
    struct Strategy {
        address strategyAddress;
        string name;
        address depositToken;
        address rewardToken;
        uint256 apy;
        uint256 tvl;
        bool active;
    }

    /**
     * @dev Get all available strategies
     * @return strategies Array of strategy information
     */
    function getAllStrategies() external view returns (Strategy[] memory strategies);

    /**
     * @dev Get strategies for a specific token
     * @param token Token address to find strategies for
     * @return strategies Array of strategy information for the token
     */
    function getStrategiesForToken(address token) external view returns (Strategy[] memory strategies);

    /**
     * @dev Get the best strategy for a token based on APY
     * @param token Token address
     * @return strategy Best strategy information
     */
    function getBestStrategy(address token) external view returns (Strategy memory strategy);

    /**
     * @dev Deposit into the best strategy for a token
     * @param token Token address
     * @param amount Amount to deposit
     * @return strategyAddress Address of the strategy used
     */
    function depositToBestStrategy(address token, uint256 amount) external returns (address strategyAddress);

    /**
     * @dev Get estimated returns for a deposit
     * @param strategyAddress Strategy to check
     * @param amount Deposit amount
     * @param timeHorizon Time horizon in seconds
     * @return estimatedReturn Estimated return amount
     */
    function getEstimatedReturn(address strategyAddress, uint256 amount, uint256 timeHorizon)
        external
        view
        returns (uint256 estimatedReturn);
}

/**
 * @title IYieldYakFarm
 * @dev Interface for YieldYak Farm contracts (specific farming strategies)
 */
interface IYieldYakFarm {
    /**
     * @dev Stake tokens in the farm
     * @param amount Amount to stake
     */
    function stake(uint256 amount) external;

    /**
     * @dev Unstake tokens from the farm
     * @param amount Amount to unstake
     */
    function unstake(uint256 amount) external;

    /**
     * @dev Claim pending rewards
     */
    function claimRewards() external;

    /**
     * @dev Get pending reward amount for an account
     * @param account Account address
     * @return rewards Pending reward amount
     */
    function pendingRewards(address account) external view returns (uint256 rewards);

    /**
     * @dev Get staked balance for an account
     * @param account Account address
     * @return balance Staked balance
     */
    function stakedBalance(address account) external view returns (uint256 balance);

    /**
     * @dev Get total staked amount in the farm
     * @return totalStaked Total staked amount
     */
    function totalStaked() external view returns (uint256 totalStaked);

    /**
     * @dev Get reward rate per second
     * @return rate Reward rate
     */
    function rewardRate() external view returns (uint256 rate);

    /**
     * @dev Get reward token address
     * @return rewardToken Reward token address
     */
    function rewardToken() external view returns (address rewardToken);

    /**
     * @dev Get staking token address
     * @return stakingToken Staking token address
     */
    function stakingToken() external view returns (address stakingToken);

    /**
     * @dev Emergency withdraw (forfeit rewards)
     */
    function emergencyWithdraw() external;

    /**
     * @dev Get farm information
     * @return stakingToken Staking token address
     * @return rewardToken Reward token address
     * @return totalStaked Total staked amount
     * @return rewardRate Current reward rate
     * @return active Whether farm is active
     */
    function getFarmInfo()
        external
        view
        returns (
            address stakingToken,
            address rewardToken,
            uint256 totalStaked,
            uint256 rewardRate,
            bool active
        );
}